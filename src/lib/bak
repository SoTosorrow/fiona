<script lang="ts">

    let id: number = Math.random();
    let x: number = Math.random() * 200;
    let y: number = Math.random() * 200;
    let view:any = null;

    let onClick = ()=>{
        console.log(id);
    }
    export let activeItem;
</script>


<!-- svelte-ignore a11y-click-events-have-key-events -->
<g
    bind:this={view}
    on:click={ ()=>{ activeItem() } }
>

    <rect
        x={x + "px"}
        y={y + "px"}
        rx="5px"
        width="100"
        height="40"
        fill="#ddd"
        stroke="black"
        stroke-width=2
        transform="translate(0, 0)"
    />
</g>

<!-- <script lang="ts">
    import Node from "./lib/Node.svelte";

    let nodes: any = [1,2,3];

    let init = () => {
        console.log("init...");
    };

    let current_active_item = null;
    let addItem = ()=>{
        console.log(1);
        nodes = [...nodes, 1];
    }
    let activeItem=(item)=>{
        // if(current_active_item){
        //     current_active_item.view.children[0].style.fill = '#ddd';
        // }
        // current_active_item = item;
        // item.view.children[0].style.fill = 'red';
        console.log(item);
        
    }

    let view_stat = false;
    let sceneMouseDown = (e)=>{
        console.log('down');
        if(e.which == '1'){
            view_stat = true;
        }
        if(e.which == '3'){
            addItem();
        }
    }
    let sceneMouseUp = (e)=>{
        console.log('up');
        view_stat = false;
    }
    let sceneMouseMove = (e)=>{
        if(view_stat === true && current_active_item){
            current_active_item.view.children[0].style.fill = `#${e.clientY}`;
            current_active_item.view.children[0].style.transform =`translate(${e.clientX}px, ${e.clientY}px)`;
            current_active_item.view.children[0].style.x = '0'
            current_active_item.view.children[0].style.y = '0'
        }
    }


    init();
</script>

<main style="height:100vh;width:100vw;">
    <svg id="view" width="1000" height="900" style="margin:0;background-color:gray;"
        on:mousedown={sceneMouseDown}
        on:mouseup={sceneMouseUp}
        on:mousemove={sceneMouseMove}
    >
        {#each nodes as node}
           <Node activeItem={()=>{activeItem(node)}}/>
          
        {/each}
    </svg>
</main>

<style>
</style> -->
